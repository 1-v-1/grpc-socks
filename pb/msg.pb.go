// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/msg.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/msg.proto

It has these top-level messages:
	Payload
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Payload struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Payload)(nil), "pb.Payload")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProxyService service

type ProxyServiceClient interface {
	Echo(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error)
	Pipeline(ctx context.Context, opts ...grpc.CallOption) (ProxyService_PipelineClient, error)
	PipelineUDP(ctx context.Context, opts ...grpc.CallOption) (ProxyService_PipelineUDPClient, error)
}

type proxyServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyServiceClient(cc *grpc.ClientConn) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) Echo(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := grpc.Invoke(ctx, "/pb.ProxyService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyServiceClient) Pipeline(ctx context.Context, opts ...grpc.CallOption) (ProxyService_PipelineClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProxyService_serviceDesc.Streams[0], c.cc, "/pb.ProxyService/Pipeline", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServicePipelineClient{stream}
	return x, nil
}

type ProxyService_PipelineClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type proxyServicePipelineClient struct {
	grpc.ClientStream
}

func (x *proxyServicePipelineClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServicePipelineClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyServiceClient) PipelineUDP(ctx context.Context, opts ...grpc.CallOption) (ProxyService_PipelineUDPClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProxyService_serviceDesc.Streams[1], c.cc, "/pb.ProxyService/PipelineUDP", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyServicePipelineUDPClient{stream}
	return x, nil
}

type ProxyService_PipelineUDPClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type proxyServicePipelineUDPClient struct {
	grpc.ClientStream
}

func (x *proxyServicePipelineUDPClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyServicePipelineUDPClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ProxyService service

type ProxyServiceServer interface {
	Echo(context.Context, *Payload) (*Payload, error)
	Pipeline(ProxyService_PipelineServer) error
	PipelineUDP(ProxyService_PipelineUDPServer) error
}

func RegisterProxyServiceServer(s *grpc.Server, srv ProxyServiceServer) {
	s.RegisterService(&_ProxyService_serviceDesc, srv)
}

func _ProxyService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ProxyService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).Echo(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyService_Pipeline_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).Pipeline(&proxyServicePipelineServer{stream})
}

type ProxyService_PipelineServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type proxyServicePipelineServer struct {
	grpc.ServerStream
}

func (x *proxyServicePipelineServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServicePipelineServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProxyService_PipelineUDP_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServiceServer).PipelineUDP(&proxyServicePipelineUDPServer{stream})
}

type ProxyService_PipelineUDPServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type proxyServicePipelineUDPServer struct {
	grpc.ServerStream
}

func (x *proxyServicePipelineUDPServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyServicePipelineUDPServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProxyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ProxyService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipeline",
			Handler:       _ProxyService_Pipeline_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PipelineUDP",
			Handler:       _ProxyService_PipelineUDP_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/msg.proto",
}

func init() { proto.RegisterFile("pb/msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x48, 0xd2, 0xcf,
	0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe5, 0x62,
	0x0f, 0x48, 0xac, 0xcc, 0xc9, 0x4f, 0x4c, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x8d, 0x7a, 0x19, 0xb9, 0x78, 0x02, 0x8a, 0xf2,
	0x2b, 0x2a, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x94, 0xb8, 0x58, 0x5c, 0x93, 0x33,
	0xf2, 0x85, 0xb8, 0xf5, 0x0a, 0x92, 0xf4, 0xa0, 0x3a, 0xa5, 0x90, 0x39, 0x4a, 0x0c, 0x42, 0x5a,
	0x5c, 0x1c, 0x01, 0x99, 0x05, 0xa9, 0x39, 0x99, 0x79, 0xa9, 0xf8, 0xd4, 0x69, 0x30, 0x1a, 0x30,
	0x0a, 0xe9, 0x72, 0x71, 0xc3, 0xd4, 0x86, 0xba, 0x04, 0x10, 0x52, 0x9e, 0xc4, 0x06, 0x76, 0xb9,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x75, 0x05, 0x7f, 0xbe, 0xc9, 0x00, 0x00, 0x00,
}
